cast = ""mother cooks""
install.packages("devtools")
library(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv")
install.packages("rmarkdown")
install.packages("knitr")
library(ggplot2)
data(diamonds)
??ggplot2
?ggplot2
data()
data(package="ggplot2")
data(presidential)
head(presidential)
data(seals)
head(seals)
data(txhousing)
head(txhousing)
data(package="MASS")
data(package="ggplot2")
data("economics")
head(economics)
data(midwest)
head(midwest)
x=rnorm(1000)
y=rnorm(1000)
qplot(x)
qplot(x,y)
ggplot(aes(x=x,y=y))
ggplot(data = data.frame(x=x,y=y),aes(x=x,y=y))
ggplot(data = data.frame(x1=x,y1=y),aes(x=x1,y=y1))
f1=data.frame(x1=x,y1=y)
head(f1)
ggplot(data = data.frame(x=x,y=y),aes(x=x,y=y)) + geom_point()
data(WorldPhones)
head(WorldPhones)
WorldPhones.m = melt(WorldPhones)
library(reshape2)
WorldPhones.m = melt(WorldPhones)
View(WorldPhones.m)
View(WorldPhones.m)
WorldPhones.m = melt(WorldPhones)
View(WorldPhones.m)
View(WorldPhones)
head(WorldPhones)
View(WorldPhones)
library(waffle)
?waffle
parts <- c(80, 30, 20, 10)
chart <- waffle(parts, rows=8)
chart
setwd("C:/Users/clee/Google 雲端硬碟/Fall2820L/Notes/Lab2")
library(rmarkdown)
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
str(vec_inc)
str(vec_int)
vec_int
vec_chr
c(vec_int)
c(vec_int, vec_chr)
str(c(vec_int, vec_chr))
?c
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
?[]
?[
?"["
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
x <- c("pear", "apple", "banana", "apple", "pear", "apple")
factor(x, levels = c("apple", "banana", "pear"))
x <- c("pear", "apple", "banana", "apple", "pear", "apple")
factor(x, levels = c("apple", "banana", "pear"))
render("Lab2.Rmd")
head(txhousing)
data.txhousing
render("Lab2.Rmd")
month.tx = data.txhousing$month
summary(month.tx)
summary(as.factor(month.tx))
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
install.packages("swirl")
library("swirl")
install_course_github("dgrtwo", "RData", branch="quizzes", multi=TRUE)
install_course_github("dgrtwo", "RData", branch="quizzes", multi=TRUE)
swirl()
data("iris")
View(iris)
ggplot(data=iris, aes(x=Species,y=Petal.Length)) + geom_boxplot()
ggplot(data=iris, aes(x=Species,y=Petal.Length)) + geom_violin()
str(data.txhousing)
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
View(data.txhousing)
ggplot(data = data.txhousing, aes(x=city, y=median)) + geom_boxplot()
data(package=ggplot2)
data(package="ggplot2")
data(midwest)
View(midwest)
View(msleep)
?msleep
ggplot(data=msleep, aes(x=vore, y=sleep_total)) + geom_boxplot
ggplot(data=msleep, aes(x=vore, y=sleep_total)) + geom_boxplot()
ggplot(data=msleep, aes(x=vore, y=bodywt)) + geom_violin()
ggplot(data=msleep, aes(x=vore, y=bodywt)) + sleep_total()
ggplot(data=msleep, aes(x=vore, y=sleep_total)) + geom_violin()
write.csv("msleep",file="msleep.csv")
msleep2 <- msleep[-c(5,43,70),]
ggplot(data=msleep2, aes(x=vore, y=sleep_total)) + geom_violin()
write.csv("msleep2",file="msleep.csv")
unique(txhousing$city)
tx.data = data.txhousing %>% filter(city %in% c("Corpus Christi","Dallas","El Paso","Houston","Lubbock","San Antonio"))
library(dplyr)
tx.data = data.txhousing %>% filter(city %in% c("Corpus Christi","Dallas","El Paso","Houston","Lubbock","San Antonio"))
ggplot(data=tx.data, aes(x=city, y=median)) + geom_violin()
ggplot(data=tx.data, aes(x=city, y=median)) + geom_boxplot()
write.csv(tx.data,file="txhousing_truncated.csv")
write.csv(tx.data,file="txhousing.csv")
render("Lab2.Rmd")
data.txhousing$c("city","month")
data.txhousing$city
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
str(data.txhousing["city"])
str(data.txhousing["city"])
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
write.csv(data.txhousing, file="new_txhousing.csv") # save data.txhousing into a .csv file in working directory
plot.city.violin <- plot.city + geom_violin() # create a ggplot2 object
ggsave("city_violin.png", plot = plot.city.violin)
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
newframe <- data.frame(x=vec_int,
width=vec_num,
description=vec_chr,
logical=vec_logical)
newframe <- data.frame(x=vec_int,
width=vec_num)
vec_int
vec_num
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
quantile(data.txhousing$median)
quantile(data.txhousing$median, na.rm=TRUE)
mean(data.txhousing$median, na.rm=TRUE)
mean(data.txhousing$median)
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
summary(data.txhousing)
summary(data.txhousing)
render("Lab2.Rmd")
?head
setwd("C:/Users/clee/Google 雲端硬碟/Fall2820L/Homework")
setwd("C:/Users/clee/Google 雲端硬碟/Fall2820L/Homework/Homework2")
data_iris <- read.csv("iris.csv",stringsAsFactor=FALSE)
View(data_iris)
plot.species <- ggplot(data=data_iris, aes(x=Species, y=Petal.Length))
plot.species + geom_boxplot()
plot.species + geom_violin()
data_msleep  <- read.csv("truncated_msleep.csv",stringsAsFactors=FALSE)
summary(data_iris)
quantiles(data_iris)
quantiles(data_iris$Sepal.Length)
quantile(data_iris$Sepal.Length)
var(data_iris$Sepal.Length)
range(Petal.Length)
range(data_iris$Petal.Length)
render("Homework2.Rmd")
render("Homework2.Rmd")
render("Homework2.Rmd")
render("Homework2.Rmd")
render("Homework2.Rmd")
render("Homework2.Rmd")
render("Homework2.Rmd")
render("Homework2.Rmd")
render("Homework2.Rmd")
render("Homework2.Rmd")
render("Homework2.Rmd")
render("Lab2.Rmd")
setwd("C:/Users/clee/Google 雲端硬碟/Fall2820L/Notes/Lab2")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
plot.city + geom_violin()
# Chunk 1: setup
knitr::opts_chunk$set(collapse=TRUE, result="hold")
# Chunk 4
data.txhousing <- read.csv("txhousing.csv", header=TRUE, stringsAsFactors=FALSE)
# Chunk 5
data.txhousing <- read.csv("txhousing.csv", stringsAsFactors=FALSE)
# Chunk 6
1 / 10 * 30
(29 - 291 + 83) / 32
exp(2*sin(0.3*pi))
# Chunk 7
x <- 1 / 10 * 30
y <- (29 - 291 + 83) / 32
x + y
x * y
# Chunk 9
a <- 10
A <- 3
a == A
# Chunk 10
vec_int <- c(1,2,3,4,5) # integer vector
vec_num <- c(2.5,1/3,sqrt(2),pi,exp(1)) # double vector
vec_chr <- c("character","vector","of","length","5")
vec_logical <- c(TRUE,FALSE,FALSE,TRUE,TRUE)
vec_int
vec_num
vec_chr
vec_logical
# Chunk 11
str(vec_int)
str(vec_num)
str(vec_chr)
str(vec_logical)
# Chunk 12
c_int_logical <-  c(vec_int,vec_logical)
str(c_int_logical) # Note that TRUE FALSE were converted to 1 and 0, respectively.
c_logical_chr <- c(vec_chr,vec_logical)
str(c_logical_chr)
# Chunk 13
length(vec_int)
# Chunk 14
vec_int[5]
vec_num[c(3,1,2)]
vec_logical[c(2,1)]
# Chunk 15
str(vec_num[c(3,1,2)])
str(vec_logical[c(2,1)])
# Chunk 16
str(data.txhousing)
# Chunk 17
newframe <- data.frame(x=vec_int,
width=vec_num,
description=vec_chr,
logical=vec_logical)
newframe
# Chunk 18
dim(data.txhousing)
# Chunk 19
data.txhousing[2,2]
data.txhousing[c(1000:1005),c(1:5)]  # subset row 1000 to 1005, column 1 to 5.
data.txhousing[c(1000:1005),c("X","city","year","month")]
# Chunk 21
str(data.txhousing["city"])
str(data.txhousing[,"city"])
str(data.txhousing$city)
# Chunk 22
sport <-c("soccer", "basketball", "lacrosse", "soccer", "soccer", "lacrosse")
sport.f <- factor(sport, levels=c("basketball", "soccer", "lacrosse"))
sport.f2 <- factor(sport, levels=c("basketball", "soccer"))
sport
sport.f
sport.f2
# Chunk 23
summary(data.txhousing)
# Chunk 24
mean(data.txhousing$volume)
mean(data.txhousing$volume, na.rm=TRUE)
# Chunk 25
library(ggplot2)
plot.city <- ggplot(data=data.txhousing, aes(x=city, y=median))
plot.city + geom_boxplot()
write.csv(data.txhousing, file="new_txhousing.csv") # save data.txhousing into a .csv file in working directory
plot.city.violin <- plot.city + geom_violin() # create a ggplot2 object
ggsave("city_violin.png", plot = plot.city.violin)
plot.city + geom_violin()
render("Lab2.Rmd")
library(flexdashboard)
install.packages("flexdashboard")
render("Lab2.Rmd")
render("Lab2.Rmd")
render("Lab2.Rmd")
install.packages(shiny)
install.packages("shiny")
library(shiny)
